from state_machine.state import State, StateBundle
from state_machine.state_tree import StateTree
from aiogram.types import Message
from keyboards.inline import *

import enum

class AdminMainMenu(State):
    def __init__(self, tree: StateTree) -> None:
        super().__init__('admin_main_menu', tree)

    async def enable(self, bundle: StateBundle = None) -> None:
        await self.tree.user.bot.send_message(
            chat_id=self.tree.user.id,
            text=f'–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
            reply_markup=admin_main_menu_kb
        )
    
    async def disable(self) -> None:
        ...

    async def process_message(self, message: Message) -> None:
        from models.db import DB
        from models.user import UserRights

        if message.text == '–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
            await self.tree.set_state_by_name('admin_find_user')
        elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
            for user in DB.users:
                user_status = { UserRights.USER: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', UserRights.ADMIN: '–ê–¥–º–∏–Ω'}.get(user.rights, '–ì–æ—Å—Ç—å')
                chat = await user.get_chat()
                    
                await self.tree.user.bot.send_message(
                    chat_id=self.tree.user.id,
                    text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{chat.username} ({chat.full_name})\n'
                        f'–ö–æ–¥: üîë<b>{user.data.code}</b>\n'
                        f'–°—Ç–∞—Ç—É—Å: üíº<b>{user_status}</b>\n'
                        f'–ë–∞–ª–∞–Ω—Å: üí∞<b>{user.data.money}</b>',
                    parse_mode='HTML'
                )
            await self.tree.user.bot.send_message(
                chat_id=self.tree.user.id,
                text=f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
                reply_markup=admin_main_menu_kb
            )  
        else:
            await self.tree.user.bot.send_message(
                chat_id=self.tree.user.id,
                text=f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.',
                reply_markup=admin_main_menu_kb
            )   















class FindUser(State):
    def __init__(self, tree: StateTree) -> None:
        super().__init__('admin_find_user', tree)

    async def enable(self, bundle: StateBundle = None) -> None:
        await self.tree.user.bot.send_message(
            chat_id=self.tree.user.id,
            text=f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            reply_markup=return_to_menu_kb
        )
    
    async def disable(self) -> None:
        ...

    async def process_message(self, message: Message) -> None:
        from models.user import UserRights
        from models.db import DB
        from state_machine.state_tree import StateTree
        text : str = message.text
        if text.isdigit() and 0 <= int(text) <= 999:
            code = int(text)
            user = DB.get_user_by_code(code)
            if user == None:
                await self.tree.user.bot.send_message(
                    chat_id=self.tree.user.id,
                    text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    reply_markup=return_to_menu_kb
                )
            else:
                a_user = await user.get_chat()
                await self.tree.user.bot.send_message(
                    chat_id=self.tree.user.id,
                    text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ–¥–æ–º üîë<b>{code}</b> –Ω–∞–π–¥–µ–Ω: @{a_user.username} ({a_user.full_name})',
                    parse_mode='HTML'
                )
                user_status = { UserRights.USER: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', UserRights.ADMIN: '–ê–¥–º–∏–Ω'}.get(user.rights, '–ì–æ—Å—Ç—å')
                await self.tree.user.bot.send_message(
                    chat_id=self.tree.user.id,
                    text=f'–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: üíº<b>{user_status}</b>',
                    parse_mode='HTML'
                )
                if user.rights == UserRights.UNREGISTERED:
                    b = StateBundle()
                    b.code = code
                    await self.tree.set_state_by_name('edit_unregistered_user_edit', b)

                elif user.rights == UserRights.USER:
                    b = StateBundle()
                    b.code = code
                    await self.tree.set_state_by_name('edit_registered_user_edit', b)
                else:
                    await self.tree.user.bot.send_message(
                        chat_id=self.tree.user.id,
                        text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å',
                        reply_markup=admin_main_menu_kb
                    )


        elif text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            await self.tree.set_state_by_name('admin_main_menu')
        else:
            await self.tree.user.bot.send_message(
                chat_id=self.tree.user.id,
                text=f'–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.',
                reply_markup=return_to_menu_kb
            )  












class EditUnregisteredUser(State):
    def __init__(self, tree) -> None:
        super().__init__('edit_unregistered_user_edit', tree)

    async def enable(self, bundle: StateBundle = None) -> None:
        if bundle == None:
            print('Didn`t reciev a bundle in edit_unregistered_user_edit!')
        self.code = bundle.code
        await self.tree.user.bot.send_message(
                chat_id=self.tree.user.id,
                text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è üîë<b>{self.code}</b> (–Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫—Ä—É—Ç–∫–∏ —É–¥–∞—á–∏)',
                reply_markup=admin_unregistered_user_menu_kb,
                parse_mode='HTML'
            )  

    async def disable(self) -> None:
        ...

    async def process_message(self, message: Message) -> None:
        from models.db import DB
        text = message.text
        if text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å':
            await self.tree.user.bot.send_message(
                chat_id=self.tree.user.id,
                text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üîë<b>{self.code}</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.',
                parse_mode='HTML'
            )
            user = DB.get_user_by_code(self.code)
            await user.setup_user()
            await user.enable_first_state()
            await self.tree.set_state_by_name('admin_main_menu')
              
        elif text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            await self.tree.set_state_by_name('admin_main_menu')
        else:
            await self.tree.user.bot.send_message(
                chat_id=self.tree.user.id,
                text=f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
                reply_markup=admin_unregistered_user_menu_kb,
            )  













class EditRegisteredUser(State):

    class Substate(enum.Enum):
        MENU = 0,
        REPLENISHMENT = 1,
        FORCE_SET = 2

    def __init__(self, tree) -> None:
        super().__init__('edit_registered_user_edit', tree)

    async def enable(self, bundle: StateBundle = None) -> None:
        self.substate = EditRegisteredUser.Substate.MENU
        if bundle == None:
            print('Didn`t reciev a bundle in edit_registered_user_edit!')
        self.code = bundle.code
        await self.tree.user.bot.send_message(
                chat_id=self.tree.user.id,
                text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è üîë<b>{self.code}</b>',
                reply_markup=admin_registered_user_menu_kb,
                parse_mode='HTML'
            )  

    async def disable(self) -> None:
        ...

    async def process_message(self, message: Message) -> None:
        from models.db import DB
        text = message.text
        if text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
            await self.tree.user.bot.send_message(
                chat_id=self.tree.user.id,
                text=f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É',
                reply_markup=return_to_menu_kb
            )
            self.substate = EditRegisteredUser.Substate.REPLENISHMENT

        elif text == '–ó–∞–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å':
            await self.tree.user.bot.send_message(
                chat_id=self.tree.user.id,
                text=f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É',
                reply_markup=return_to_menu_kb
            )
            self.substate = EditRegisteredUser.Substate.FORCE_SET

        elif text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            await self.tree.set_state_by_name('admin_main_menu')

        elif self.substate != EditRegisteredUser.Substate.MENU:
            if text.isdigit():
                amount = int(text)
                user = DB.get_user_by_code(self.code)
                if self.substate == EditRegisteredUser.Substate.REPLENISHMENT:
                    user.data.money += amount

                    await user.bot.send_message(
                        chat_id=user.id,
                        text=f'–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–ª–Ω–µ–Ω –Ω–∞ üí∞<b>{amount}</b> –≤—Å–µ–≥–æ: üí∞<b>{user.data.money}</b>',
                        reply_markup=registered_main_menu,
                        parse_mode='HTML'
                    ) 

                else:
                    user.data.money = amount

                    await user.bot.send_message(
                        chat_id=user.id,
                        text=f'–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ üí∞<b>{amount}</b>',
                        reply_markup=registered_main_menu,
                        parse_mode='HTML'
                    ) 

                await self.tree.user.bot.send_message(
                    chat_id=self.tree.user.id,
                    text=f'–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞.',
                )

                await self.tree.set_state_by_name('admin_main_menu')

            else:
                await self.tree.user.bot.send_message(
                    chat_id=self.tree.user.id,
                    text=f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ',
                    reply_markup=return_to_menu_kb
                )
        else:
            await self.tree.user.bot.send_message(
                chat_id=self.tree.user.id,
                text=f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
                reply_markup=admin_registered_user_menu_kb,
            )  

